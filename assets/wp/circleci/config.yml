version: 2

jobs:
  build:
    docker:
      - image: '[docker_image]'
        user: 'docker'
    steps:
      - checkout
      # Composer
      - restore_cache:
          name: 'Composer: restore cache'
          keys:
            - composer-v1-{{ checksum "[path_to_composer.lock]" }}
            - composer-v1-
      - run:
          name: 'Composer: install root'
          command: composer install --no-dev --prefer-dist
          working_directory: '[path_to_composer_working_directory]'
      - run:
          name: 'Composer: install theme'
          command: '[ -f composer.lock ] && composer install --no-dev --prefer-dist || echo "No composer.lock available."'
          working_directory: '[path_to_theme]'
      - save_cache:
          name: 'Composer: save cache'
          key: composer-vs-{{ checksum "[path_to_composer.lock]" }}
          paths:
            - '[path_to_composer_working_directory]/vendor'
            - '[path_to_composer_working_directory]/public/mu-plugins'
            - '[path_to_composer_working_directory]/public/plugins'
            - '[path_to_composer_working_directory]/public/wordpress'
            - '[path_to_theme]/vendor'
      # Node
      - restore_cache:
          name: 'Node: restore cache'
          keys:
            - node-v1-{{ checksum "[path_to_theme]/package-lock.json" }}
            - node-v1-
      - run:
          name: 'Node: download packages'
          command: '[ -f package-lock.json ] && npm ci || echo "No package-lock.json available."'
          working_directory: '[path_to_theme]'
      - save_cache:
          name: 'Node: save cache'
          key: node-v1-{{ checksum "[path_to_theme]/package-lock.json" }}
          paths:
            - '[path_to_theme]/node_modules'
      - run:
          name: 'Node: build'
          command: '[ -f package-lock.json ] && npm run build || echo "No package-lock.json available."'
          working_directory: '[path_to_theme]'
      # Archive
      - run:
          name: 'General: create zip'
          command: tar --exclude "[path_to_theme]/node_modules" -czf ../archive.tar.gz .
          working_directory: '[path_to_composer_working_directory]'
      - store_artifacts:
          name: 'General: upload artifact'
          path: ./archive.tar.gz

  testing_deploy:
    docker:
      - image: '[docker_image]'
    steps:
      - checkout
      - run:
          name: 'Deploy to testing'
          command: |
            ssh-keyscan -H $PROD_HOST >> ~/.ssh/known_hosts;
            rsync -az ./.circleci/deploy.sh $PROD_USER@$PROD_HOST:./subsites/$TESTING_HOST/deploy.sh;
            ssh $PROD_USER@$PROD_HOST 'cd ./subsites/$TESTING_HOST && chmod +x ./deploy.sh && bash ./deploy.sh --token=' $CIRCLECI_TOKEN ' --branch=' $CIRCLE_BRANCH;

  prod_deploy:
    docker:
      - image: '[docker_image]'
    steps:
      - checkout
      - run:
          name: 'Deploy to production'
          command: |
            ssh-keyscan -H $PROD_HOST >> ~/.ssh/known_hosts;
            rsync -az ./.circleci/deploy.sh $PROD_USER@$PROD_HOST:./deploy.sh;
            ssh $PROD_USER@$PROD_HOST 'chmod +x ./deploy.sh && bash ./deploy.sh --token=' $CIRCLECI_TOKEN ' --branch' $CIRCLE_BRANCH;

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - testing
      - testing_deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - testing
      - prod_deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
