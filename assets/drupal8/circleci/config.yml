version: 2

jobs:
  build:
    docker:
      - image: '[docker_image]'
        user: 'docker'
    steps:
      - checkout
      # Composer
      - restore_cache:
          name: 'Composer: restore cache'
          keys:
            - composer-v1-{{ .Branch }}-{{ checksum "[path_to_composer.lock]" }}
            - composer-v1-{{ .Branch }}-
      - run:
          name: 'Composer: install'
          command: composer install --no-dev --prefer-dist
          working_directory: '[path_to_composer_working_directory]'
      - save_cache:
          name: 'Composer: save cache'
          key: composer-v1-{{ .Branch }}-{{ checksum "[path_to_composer.lock]" }}
          paths:
            - '[path_to_composer_working_directory]/vendor'
            - '[path_to_composer_working_directory]/app/core'
            - '[path_to_composer_working_directory]/app/modules/contrib'
            - '[path_to_composer_working_directory]/app/profiles/contrib'
            - '[path_to_composer_working_directory]/app/themes/contrib'
      # Node
      - restore_cache:
          name: 'Node: restore cache'
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "[path_to_theme]/package-lock.json" }}
            - node-v1-{{ .Branch }}-
      - run:
          name: 'Node: download packages'
          command: '[ -f package-lock.json ] && npm ci || echo "No package-lock.json available."'
          working_directory: '[path_to_theme]'
          shell: /bin/bash -leo pipefail
      - save_cache:
          name: 'Node: save cache'
          key: node-v1-{{ .Branch }}-{{ checksum "[path_to_theme]/package-lock.json" }}
          paths:
            - '[path_to_theme]/node_modules'
      - run:
          name: 'Node: build'
          command: '[ -f package-lock.json ] && npm run build || echo "No package-lock.json available."'
          working_directory: '[path_to_theme]'
          shell: /bin/bash -leo pipefail
      # Drupal Paranoia
      - run:
          name: 'Composer: drupal:paranoia'
          command: composer drupal:paranoia
          working_directory: '[path_to_composer_working_directory]'
      # Archive
      - run:
          name: 'General: create zip'
          command: tar --exclude "[path_to_theme]/node_modules" --exclude "[path_to_theme]/src" -czf ../archive.tar.gz .
          working_directory: '[path_to_composer_working_directory]'
      - store_artifacts:
          name: 'General: upload artifact'
          path: ./archive.tar.gz

  acc_deploy:
    docker:
      - image: '[docker_image]'
    steps:
      - checkout
      - run:
          name: 'Deploy to ACC'
          command: |
            ssh-keyscan -H $PROD_HOST >> ~/.ssh/known_hosts;
            rsync -az ./.circleci/deploy.sh $PROD_USER@$PROD_HOST:./subsites/$TESTING_HOST/deploy.sh;
            ssh $PROD_USER@$PROD_HOST "cd ./subsites/$TESTING_HOST && chmod +x ./deploy.sh && bash ./deploy.sh --token=$CIRCLECI_TOKEN --branch=$CIRCLE_BRANCH";

  prod_deploy:
    docker:
      - image: '[docker_image]'
    steps:
      - checkout
      - run:
          name: 'Deploy to PROD'
          command: |
            ssh-keyscan -H $PROD_HOST >> ~/.ssh/known_hosts;
            rsync -az ./.circleci/deploy.sh $PROD_USER@$PROD_HOST:./deploy.sh;
            ssh $PROD_USER@$PROD_HOST "chmod +x ./deploy.sh && bash ./deploy.sh --token=$CIRCLECI_TOKEN --branch=$CIRCLE_BRANCH";

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - acc
      - acc_deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - acc
      - prod_deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
